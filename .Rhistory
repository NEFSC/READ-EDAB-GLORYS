stringsAsFactors = F)
output.ls[[i]] = out.match
##should return a list of dataframes##
if(search.radius > 0){
#extract a in a ring around a coordinate match
val.product.rc = terra::rowColFromCell(this.data,this.coords.vals$cell) %>%
as.data.frame() %>%
dplyr::rename(x.center = 'V1',y.center = 'V2')%>%
dplyr::mutate(center.cell = this.coords.vals$cell,
x.min = x.center - search.radius,
x.max = x.center + search.radius,
y.min = y.center - search.radius,
y.max = y.center + search.radius)
output.stat.ls = list()
for(k in 1:nrow(val.product.rc)){
#get the row and column for this coordinate
this.row = val.product.rc$x.center[k]
this.col = val.product.rc$y.center[k]
#get the rows and columns for the box
this.row.range = (this.row - search.radius):(this.row + search.radius)
this.col.range = (this.col - search.radius):(this.col + search.radius)
#get the cells in the box
this.box.cells = terra::cellFromRowCol(this.data,rep(this.row.range, length(this.col.range)),rep(this.col.range,each = length(this.col.range)))
#extract from raster
this.box.vals = terra::extract(this.date.rast,this.box.cells)[,1]
#get the summary statistics for this box
output.stat.ls[[k]] = lapply(statistics, function(stat){
if(stat == 'mean'){
this.box.stat = mean(this.box.vals, na.rm = T)
}else if(stat == 'median'){
this.box.stat = median(this.box.vals, na.rm = T)
}else if(stat == 'min'){
this.box.stat = min(this.box.vals, na.rm = T)
}else if(stat == 'max'){
this.box.stat = max(this.box.vals, na.rm = T)
}else if(stat == 'sd'){
this.box.stat = sd(this.box.vals, na.rm = T)
}else if(stat == 'var'){
this.box.stat = var(this.box.vals, na.rm = T)
}else if(stat == 'sum'){
this.box.stat = sum(this.box.vals, na.rm = T)
}
stat.out = val.product.rc[k,] %>%
dplyr::mutate(statistic = stat,value = this.box.stat)
return(stat.out)
})%>%
dplyr::bind_rows()
}
output.stat.df = dplyr::bind_rows(output.stat.ls) %>%
left_join(out.match)
output.ls[[i]] = output.stat.df
}
}
}else if(input.type == 'annual'){
coord.years = format(coordinates$date,format = '%Y')
#match input.file years to coord.years
input.file.year.match = input.file.year[which(input.file.year %in% coord.years)]
ind = 1
for(i in 1:length(input.file.year.match)){
#Get the year for this file
this.year = input.file.year.match[i]
#Get the file name for this year
this.file = paste0(input.dir,input.files.short[which(input.file.year == this.year)])
#Read in netCDF
this.data = terra::rast(this.file,subds = 'thetao')
this.data.time = as.character(terra::time(this.data))
#Match this dates from this.year to this.data
coord.year.dates = sort(unique(as.Date(coordinates$date[which(format(coordinates$date,format = '%Y') == this.year)])))
coord.year.dates = coord.year.dates[which(coord.year.dates %in% this.data.time)]
for(j in 1:length(coord.year.dates)){
this.date = which(this.data.time == coord.year.dates[j])
which.coord.date = which(as.character(coordinates$date) == coord.year.dates[j])
#get coordinates for this date
this.coords = dplyr::filter(coordinates, date == coord.year.dates[j]) %>%
dplyr::select(lon,lat) %>%
as.matrix()
this.date.rast = subset(this.data,this.date)
#Extract from raster
this.coords.vals = terra::extract(this.date.rast,this.coords,cells = T)
val.product.coords =  terra::xyFromCell(this.data,this.coords.vals$cell)
## change to index
out.match = data.frame(lon.obs = this.coords[,1],
lat.obs = this.coords[,2],
lon.product = val.product.coords[,1],
lat.product = val.product.coords[,2],
center.value = this.coords.vals[,2],
date = as.Date(coord.year.dates[j]),
var.name = var.name,
search.radius = search.radius,
center.cell = this.coords.vals$cell,
stringsAsFactors = F)
output.ls[[ind]] = out.match
#Do search radius
#extract a in a ring around a coordinate match
val.product.rc = terra::rowColFromCell(this.data,this.coords.vals$cell) %>%
as.data.frame() %>%
dplyr::rename(x.center = 'V1',y.center = 'V2')%>%
dplyr::mutate(center.cell = this.coords.vals$cell,
x.min = x.center - search.radius,
x.max = x.center + search.radius,
y.min = y.center - search.radius,
y.max = y.center + search.radius)
#loop through val.product.rc and extract box defined by x1,x2,y1,y2
##should return a list of dataframes##
if(search.radius > 0){
output.stat.ls = list()
for(k in 1:nrow(val.product.rc)){
#get the row and column for this coordinate
this.row = val.product.rc$x.center[k]
this.col = val.product.rc$y.center[k]
#get the rows and columns for the box
this.row.range = (this.row - search.radius):(this.row + search.radius)
this.col.range = (this.col - search.radius):(this.col + search.radius)
#get the cells in the box
this.box.cells = terra::cellFromRowCol(this.data,rep(this.row.range, length(this.col.range)),rep(this.col.range,each = length(this.col.range)))
#extract from raster
this.box.vals = terra::extract(this.date.rast,this.box.cells)[,1]
#get the summary statistics for this box
output.stat.ls[[k]] = lapply(statistics, function(stat){
if(stat == 'mean'){
this.box.stat = mean(this.box.vals, na.rm = T)
}else if(stat == 'median'){
this.box.stat = median(this.box.vals, na.rm = T)
}else if(stat == 'min'){
this.box.stat = min(this.box.vals, na.rm = T)
}else if(stat == 'max'){
this.box.stat = max(this.box.vals, na.rm = T)
}else if(stat == 'sd'){
this.box.stat = sd(this.box.vals, na.rm = T)
}else if(stat == 'var'){
this.box.stat = var(this.box.vals, na.rm = T)
}else if(stat == 'sum'){
this.box.stat = sum(this.box.vals, na.rm = T)
}
stat.out = val.product.rc[k,] %>%
dplyr::mutate(statistic = stat,value = this.box.stat)
return(stat.out)
})%>%
dplyr::bind_rows()
}
output.stat.df = dplyr::bind_rows(output.stat.ls) %>%
left_join(out.match)
output.ls[[ind]] = output.stat.df
}
ind = ind +1
}
}
}else{
stop('Input type not recognized. Please use daily or annual.')
}
output.df = bind_rows(output.ls) %>%
filter(!is.na(value))
output.df
#' Creates a climatology
#'
#' descriptions
#'
#' @param input.dir Either a character vector of full input file names for a list of spatrasters
#' @param input.prefix string. Prefix for the input file names
#' @param output.file character vector of full output file names corresponding to each input file
#' @param shp.file  string. Shape file you wish to crop each input file to
#' @param ref.year.start numeric. Year that climatological period starts
#' @param ref.year.end numeric. Year that climatological period ends
#' @param agg.time string. Aggregation level. Options are 'season' or 'annual'
#' @param var.name string. Name of the variable in the input file
#' @param write.out logical. If TRUE, the function will write out the gridded data to a netcdf file
#'
#' @return a dataframe (Time, Latitude, Longitude, var, value) or csv file of the gridded data
#'
#' @importFrom magrittr "%>%"
#'
#' @export
#'
#'
make_gridded_climatology = function(input.dir,
input.prefix,
output.file = NA,
shp.file,
ref.year.start,
ref.year.end,
agg.time,
var.name,
write.out = F
){
data.files = list.files(input.dir,
pattern = paste0(input.prefix,'*'),
full.names = T)
#Retreive years from file names
glorys.years = as.numeric(gsub(".*(\\d{4}).*", '\\1', data.files))
#Seasonal means by epu for all reference years
glorys.season.epu = EDABUtilities::make_2d_summary_ts(data.in = data.files,
write.out =F,
shp.file =shp.file,
var.name = var.name,
agg.time = agg.time,
statistic = 'mean',
touches =F,
area.names = c('MAB','GB','GOM','SS')
)
for(i in 1:length(glorys.years)){glorys.season.epu[[i]] = mutate(glorys.season.epu[[i]], year = glorys.years[i], Var = 'GLORYS')}
data.all.anom.clim = bind_rows(glorys.season.epu) %>%
filter(year %in% seq(ref.year.start,ref.year.end)) %>%
group_by(time,area)%>%
summarise(value.clim = mean(value,na.rm=T))
if(write.out){
write.csv(data.all.anom.clim,output.file,row.names = F)
}else{
return(data.all.anom.clim)
}
}
make_soe_climatology(input.dir = 'C:/Users/joseph.caracappa/Documents/Data/GLORYS/GLORYS_daily/',
input.prefix = 'GLORYS_daily_BottomTemp_',
output.file = here::here('data-raw','GLORYS_bottom_temp_clim_1990_2020.csv'),
shp.file = here::here('geometry','EPU_NOESTUARIES.shp'),
write.out = T,
ref.year.start = 1990,
ref.year.end = 2020,
agg.time = 'season',
var.name = 'bottomT')
#' Creates a climatology
#'
#' descriptions
#'
#' @param input.dir Either a character vector of full input file names for a list of spatrasters
#' @param input.prefix string. Prefix for the input file names
#' @param output.file character vector of full output file names corresponding to each input file
#' @param shp.file  string. Shape file you wish to crop each input file to
#' @param ref.year.start numeric. Year that climatological period starts
#' @param ref.year.end numeric. Year that climatological period ends
#' @param agg.time string. Aggregation level. Options are 'season' or 'annual'
#' @param var.name string. Name of the variable in the input file
#' @param write.out logical. If TRUE, the function will write out the gridded data to a netcdf file
#'
#' @return a dataframe (Time, Latitude, Longitude, var, value) or csv file of the gridded data
#'
#' @importFrom magrittr "%>%"
#'
#' @export
#'
#'
make_gridded_climatology = function(input.dir,
input.prefix,
output.file = NA,
shp.file,
ref.year.start,
ref.year.end,
agg.time,
var.name,
write.out = F
){
data.files = list.files(input.dir,
pattern = paste0(input.prefix,'*'),
full.names = T)
#Retreive years from file names
glorys.years = as.numeric(gsub(".*(\\d{4}).*", '\\1', data.files))
#Seasonal means by epu for all reference years
glorys.season.epu = EDABUtilities::make_2d_summary_ts(data.in = data.files,
write.out =F,
shp.file =shp.file,
var.name = var.name,
agg.time = agg.time,
statistic = 'mean',
touches =F,
area.names = c('MAB','GB','GOM','SS')
)
for(i in 1:length(glorys.years)){glorys.season.epu[[i]] = mutate(glorys.season.epu[[i]], year = glorys.years[i], Var = 'GLORYS')}
data.all.anom.clim = bind_rows(glorys.season.epu) %>%
filter(year %in% seq(ref.year.start,ref.year.end)) %>%
group_by(time,area)%>%
summarise(value.clim = mean(value,na.rm=T))
if(write.out){
write.csv(data.all.anom.clim,output.file,row.names = F)
}else{
return(data.all.anom.clim)
}
}
make_gridded_climatology(input.dir = 'C:/Users/joseph.caracappa/Documents/Data/GLORYS/GLORYS_daily/',
input.prefix = 'GLORYS_daily_BottomTemp_',
output.file = here::here('data-raw','GLORYS_bottom_temp_clim_1990_2020.csv'),
shp.file = here::here('geometry','EPU_NOESTUARIES.shp'),
write.out = T,
ref.year.start = 1990,
ref.year.end = 2020,
agg.time = 'season',
var.name = 'bottomT')
make_gridded_climatology(input.dir = 'C:/Users/joseph.caracappa/Documents/Data/GLORYS/GLORYS_daily/',
input.prefix = 'GLORYS_daily_BottomTemp_',
output.file = here::here('data-raw','GLORYS_bottom_temp_clim_1990_2020.csv'),
shp.file = here::here('data-raw','geometry','EPU_NOESTUARIES.shp'),
write.out = T,
ref.year.start = 1990,
ref.year.end = 2020,
agg.time = 'season',
var.name = 'bottomT')
#' Creates a climatology
#'
#' descriptions
#'
#' @param input.dir Either a character vector of full input file names for a list of spatrasters
#' @param input.prefix string. Prefix for the input file names
#' @param output.file character vector of full output file names corresponding to each input file
#' @param shp.file  string. Shape file you wish to crop each input file to
#' @param ref.year.start numeric. Year that climatological period starts
#' @param ref.year.end numeric. Year that climatological period ends
#' @param agg.time string. Aggregation level. Options are 'season' or 'annual'
#' @param var.name string. Name of the variable in the input file
#' @param write.out logical. If TRUE, the function will write out the gridded data to a netcdf file
#'
#' @return a dataframe (Time, Latitude, Longitude, var, value) or csv file of the gridded data
#'
#' @importFrom magrittr "%>%"
#'
#' @export
#'
#'
make_gridded_climatology = function(input.dir,
input.prefix,
output.file = NA,
shp.file,
ref.year.start,
ref.year.end,
agg.time,
var.name,
write.out = F
){
data.files = list.files(input.dir,
pattern = paste0(input.prefix,'*'),
full.names = T)
#Retreive years from file names
glorys.years = as.numeric(gsub(".*(\\d{4}).*", '\\1', data.files))
#Seasonal means by epu for all reference years
glorys.season.epu = EDABUtilities::make_2d_summary_ts(data.in = data.files,
write.out =F,
file.time = 'annual',
shp.file =shp.file,
var.name = var.name,
agg.time = agg.time,
statistic = 'mean',
touches =F,
area.names = c('MAB','GB','GOM','SS')
)
for(i in 1:length(glorys.years)){glorys.season.epu[[i]] = mutate(glorys.season.epu[[i]], year = glorys.years[i], Var = 'GLORYS')}
data.all.anom.clim = bind_rows(glorys.season.epu) %>%
filter(year %in% seq(ref.year.start,ref.year.end)) %>%
group_by(time,area)%>%
summarise(value.clim = mean(value,na.rm=T))
if(write.out){
write.csv(data.all.anom.clim,output.file,row.names = F)
}else{
return(data.all.anom.clim)
}
}
make_gridded_climatology(input.dir = 'C:/Users/joseph.caracappa/Documents/Data/GLORYS/GLORYS_daily/',
input.prefix = 'GLORYS_daily_BottomTemp_',
output.file = here::here('data-raw','GLORYS_bottom_temp_clim_1990_2020.csv'),
shp.file = here::here('data-raw','geometry','EPU_NOESTUARIES.shp'),
write.out = T,
ref.year.start = 1990,
ref.year.end = 2020,
agg.time = 'season',
var.name = 'bottomT')
#' Creates a climatology
#'
#' descriptions
#'
#' @param input.dir Either a character vector of full input file names for a list of spatrasters
#' @param input.prefix string. Prefix for the input file names
#' @param output.file character vector of full output file names corresponding to each input file
#' @param shp.file  string. Shape file you wish to crop each input file to
#' @param ref.year.start numeric. Year that climatological period starts
#' @param ref.year.end numeric. Year that climatological period ends
#' @param agg.time string. Aggregation level. Options are 'season' or 'annual'
#' @param var.name string. Name of the variable in the input file
#' @param write.out logical. If TRUE, the function will write out the gridded data to a netcdf file
#'
#' @return a dataframe (Time, Latitude, Longitude, var, value) or csv file of the gridded data
#'
#' @importFrom magrittr "%>%"
#'
#' @export
#'
#'
make_gridded_climatology = function(input.dir,
input.prefix,
output.file = NA,
shp.file,
ref.year.start,
ref.year.end,
agg.time,
var.name,
write.out = F
){
data.files = list.files(input.dir,
pattern = paste0(input.prefix,'*'),
full.names = T)
#Retreive years from file names
glorys.years = as.numeric(gsub(".*(\\d{4}).*", '\\1', data.files))
#Seasonal means by epu for all reference years
glorys.season.epu = EDABUtilities::make_2d_summary_ts(data.in = data.files,
write.out =F,
file.time = 'annual',
shp.file =shp.file,
var.name = var.name,
agg.time = agg.time,
statistic = 'mean',
touches =F,
area.names = c('MAB','GB','GOM','SS')
)
for(i in 1:length(glorys.years)){glorys.season.epu[[i]] = dplyr::mutate(glorys.season.epu[[i]], year = glorys.years[i], Var = 'GLORYS')}
data.all.anom.clim = dplyr::bind_rows(glorys.season.epu) %>%
dplyr::filter(year %in% seq(ref.year.start,ref.year.end)) %>%
dplyr::group_by(time,area)%>%
dplyr::summarise(value.clim = mean(value,na.rm=T))
if(write.out){
write.csv(data.all.anom.clim,output.file,row.names = F)
}else{
return(data.all.anom.clim)
}
}
make_gridded_climatology(input.dir = 'C:/Users/joseph.caracappa/Documents/Data/GLORYS/GLORYS_daily/',
input.prefix = 'GLORYS_daily_BottomTemp_',
output.file = here::here('data-raw','GLORYS_bottom_temp_clim_1990_2020.csv'),
shp.file = here::here('data-raw','geometry','EPU_NOESTUARIES.shp'),
write.out = T,
ref.year.start = 1990,
ref.year.end = 2020,
agg.time = 'season',
var.name = 'bottomT')
library(dplyr)
make_gridded_climatology(input.dir = 'C:/Users/joseph.caracappa/Documents/Data/GLORYS/GLORYS_daily/',
input.prefix = 'GLORYS_daily_BottomTemp_',
output.file = here::here('data-raw','GLORYS_bottom_temp_clim_1990_2020.csv'),
shp.file = here::here('data-raw','geometry','EPU_NOESTUARIES.shp'),
write.out = T,
ref.year.start = 1990,
ref.year.end = 2020,
agg.time = 'season',
var.name = 'bottomT')
input.dir = 'C:/Users/joseph.caracappa/Documents/Data/GLORYS/GLORYS_daily/'
input.prefix = 'GLORYS_daily_BottomTemp_'
output.file = here::here('data-raw','GLORYS_bottom_temp_clim_1990_2020.csv')
shp.file = here::here('data-raw','geometry','EPU_NOESTUARIES.shp')
write.out = T
ref.year.start = 1990
ref.year.end = 2020
agg.time = 'season'
var.name = 'bottomT'
data.files = list.files(input.dir,
pattern = paste0(input.prefix,'*'),
full.names = T)
#Retreive years from file names
glorys.years = as.numeric(gsub(".*(\\d{4}).*", '\\1', data.files))
#Seasonal means by epu for all reference years
glorys.season.epu = EDABUtilities::make_2d_summary_ts(data.in = data.files,
write.out =F,
file.time = 'annual',
shp.file =shp.file,
var.name = var.name,
agg.time = agg.time,
statistic = 'mean',
touches =F,
area.names = c('MAB','GB','GOM','SS')
)
glorys.season.epu
for(i in 1:length(glorys.years)){glorys.season.epu[[i]] = dplyr::mutate(glorys.season.epu[[i]], year = glorys.years[i], Var = 'GLORYS')}
data.all.anom.clim = dplyr::bind_rows(glorys.season.epu) %>%
dplyr::filter(year %in% seq(ref.year.start,ref.year.end)) %>%
dplyr::group_by(time,area)%>%
dplyr::summarise(value.clim = mean(value,na.rm=T))
data.all.anom.clim
dplyr::bind_rows(glorys.season.epu)
agg.time
var.name
dplyr::bind_rows(glorys.season.epu)
data.all.anom.clim = dplyr::bind_rows(glorys.season.epu)
unique(data.all.anom.clim)
unique(data.all.anom.clim$time)
#Seasonal means by epu for all reference years
glorys.season.epu = EDABUtilities::make_2d_summary_ts(data.in = data.files,
write.out =F,
file.time = 'annual',
shp.file =shp.file,
var.name = var.name,
agg.time = agg.time,
statistic = 'mean',
touches =F,
area.names = c('MAB','GB','GOM','SS')
)
glorys.season.epu
for(i in 1:length(glorys.years)){glorys.season.epu[[i]] = dplyr::mutate(glorys.season.epu[[i]], year = glorys.years[i], Var = 'GLORYS')}
data.all.anom.clim = dplyr::bind_rows(glorys.season.epu) %>%
dplyr::filter(year %in% seq(ref.year.start,ref.year.end)) %>%
dplyr::group_by(time,area)%>%
dplyr::summarise(value.clim = mean(value,na.rm=T))
library(dplyr)
data.all.anom.clim = dplyr::bind_rows(glorys.season.epu) %>%
dplyr::filter(year %in% seq(ref.year.start,ref.year.end)) %>%
dplyr::group_by(time,area)%>%
dplyr::summarise(value.clim = mean(value,na.rm=T))
data.all.anom.clim
usethis::create_package(here::here())
?usethis::create_package
usethis::create_package(here::here(),fields = use_description())
?usethis::create_package('EDABGLORYS')
usethis::create_package('EDABGLORYS')
here::dr_here()
here::dr_here()
here::dr_here()
usethis::create_package('EDAB.GLORYS')
usethis::create_package(here::here())
usethis::create_package(here::here(),'EDAB.GLORYS')
usethis::create_package('.')
